generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
    // directUrl         = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
    // shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  Invitation    Invitation[]
  Game          Game[]

  // Many-to-many relationship
  friends       Friendship[] @relation("Friends")
  friendOf      Friendship[] @relation("FriendsInverse")

  @@index([email], type: Hash)
}

model Friendship {
  id        String   @id @default(cuid())
  userId    String
  friendId  String
  user      User     @relation("Friends", fields: [userId], references: [id])
  friend    User     @relation("FriendsInverse", fields: [friendId], references: [id])

  @@unique([userId, friendId])
}


model Game {
    id         String       @id @default(cuid())
    createdBy  User         @relation(fields: [userId], references: [id])
    maxPlayers Int?         @default(0)
    active     Boolean?
    name       String?
    public     Boolean?
    startDate  DateTime?
    duration   Int?
    createdAt  DateTime?    @default(now()) @map("created_at")
    updatedAt  DateTime?    @updatedAt @map("updated_at")
    Invitation Invitation[]
    userId     String

    @@index([id], type: Hash)
}

model Invitation {
    id              String     @id @default(cuid())
    answer          Boolean?
    emailSent       Boolean?
    benchType       BenchType?
    validInvitation Boolean?   @default(true)
    gameId          String?
    userId          String?
    game            Game?      @relation(fields: [gameId], references: [id])
    user            User?      @relation(fields: [userId], references: [id])
    isRequest       Boolean    @default(false)
    status          InvitationStatus @default(APPROVED)

    @@index([userId, gameId])
}

enum BenchType {
    OFFICIAL
    RESERVE
}

enum InvitationStatus {
    PENDING
    APPROVED
    DENIED
}
